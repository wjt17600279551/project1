{"version":3,"sources":["views/router/routes.js","views/router/map.js","views/router/index.js","views/main.js","serviceWorker.js","index.js"],"names":["Routes","map","routes","this","props","defaultRoute","_react_16_8_6_react_default","a","createElement","react_router","key","path","render","to","exact","v","i","TempComponent","component","config","children","undefined","Object","assign","concat","Component","RouterView","map_map","main2","className","react_router_dom","router_RouterView","Boolean","window","location","hostname","match","ReactDOM","main_main2","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PAOeA,EALA,UCCMC,mLACV,IACGC,EAAWC,KAAKC,MAAhBF,OACFG,EAAeC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,IAAK,EAAGC,KAAK,IAAIC,OAAQ,WACnD,OAAON,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUI,GAAG,YACnBC,OAAK,IACV,OAAOR,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAEAP,GAAUA,EAAOD,IAAI,SAACc,EAAEC,GACvB,IAAMC,EAAgBF,EAAEG,UACxB,GAAGD,EACC,OAAOX,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,IAAKM,EAAGL,KAAMI,EAAEJ,KAAMC,OAAQ,SAACO,GACzC,IAAMC,OAA0BC,IAAfN,EAAEK,SAAuB,GAAGL,EAAEK,SAC/C,OAAMd,EAAAC,EAAAC,cAACS,EAADK,OAAAC,OAAA,CAAerB,OAAQkB,GAAcD,SAGjDK,OAAO,CAACnB,YAhBWoB,aCEZC,mLAEb,IAAMxB,EAASC,KAAKC,MAAMF,OAASC,KAAKC,MAAMF,OAASF,EAEvD,OAAOM,EAAAC,EAAAC,cAACmB,EAAD,CAAWzB,OAAQA,WAJMuB,aCEnBG,mLAEjB,OACEtB,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,WAEXvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KAECxB,EAAAC,EAAAC,cAACuB,EAAD,eAPwBN,aCKfO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASzB,OAAON,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f221a277.chunk.js","sourcesContent":["\r\n\r\nconst Routes = [\r\n  \r\n\r\n]\r\n\r\nexport default Routes;","import React, { Component } from 'react';\r\nimport { Switch,Route,Redirect} from \"react-router-dom\";\r\n\r\nexport default class map extends Component {\r\n  render() {\r\n      const { routes } = this.props;\r\n      const defaultRoute = <Route key={0} path=\"/\" render={() => {\r\n        return <Redirect to=\"/login\"/>\r\n      }} exact/>\r\n    return <Switch>\r\n       { \r\n           routes && routes.map((v,i) => {\r\n            const TempComponent = v.component;\r\n            if(TempComponent){\r\n                return <Route key={i} path={v.path} render={(config)=>{\r\n                    const children = v.children === undefined?[]:v.children;\r\n                    return<TempComponent routes={children} {...config}></TempComponent>\r\n                }}/>\r\n            }\r\n           }).concat([defaultRoute])\r\n       }\r\n\r\n    </Switch>\r\n \r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Routes from \"./routes\";\r\nimport RouterMap from \"./map\";\r\n\r\n\r\nexport default class RouterView extends Component {\r\n    render() {\r\n        const routes = this.props.routes ? this.props.routes : Routes;\r\n  \r\n        return <RouterMap routes={routes}/>\r\n        \r\n    }\r\n  }\r\n  ","import React, { Component } from 'react';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\n\r\nimport RouteView from \"./router/index\";\r\n\r\n\r\nexport default class main2 extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"wrapper\">\r\n      \r\n          <BrowserRouter>\r\n         \r\n           <RouteView/>\r\n           \r\n         </BrowserRouter>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from \"react-redux\";\r\n\r\nimport \"./common/css/main.css\";\r\n\r\nimport App from './views/main';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}